/** Class Node
 *
 */

template<typename N, typename E>
Node<N,E>::Node()
{};


template<typename N, typename E>
Node<N,E>::Node(const N& val)
	: data_(val)
{};
	

template<typename N, typename E>
void Node<N,E>::setData(const N& val){
	data_ = val;
}


		
/** Add edge to a node
	return true if edge is added to the node
	return false if edge with same weight, destination already exists
@param 
@return
*/
template<typename N, typename E>
bool Node<N,E>::addEdge(const E &w, std::shared_ptr<Node<N,E>> d)
{
	for(unsigned int i=0; i!=next_.size();++i)
		if( std::get<0>(next_[i]) == w &&  std::get<1>(next_[i])==d)
			return false;
	next_.push_back(std::make_tuple(w, d));
	return true;
}

/** Delete edge from a node
	return true if edge is deleted from the node
	return false if edge with specified weight and destination not found
@param 
@return
*/
template<typename N, typename E>
bool Node<N,E>::deleteEdge(const E &w, std::shared_ptr<Node<N,E>> d){
	for(unsigned int i=0; i!=next_.size();++i)
		if(getWeight(i) == w && getDst(i)==d){
			next_.erase(next_.begin()+i);
			return true;
		}
	return false;
}


template<typename N, typename E>
N& Node<N,E>::getData()
{
	return data_;
}


template<typename N, typename E>
unsigned int Node<N,E>::getNumEdge(){
	return next_.size();
}



template<typename N, typename E>
E Node<N,E>::getWeight(const unsigned int idx){
	return std::get<0>(next_[idx]);
}


template<typename N, typename E>
std::shared_ptr<Node<N,E>> Node<N,E>::getDst(const unsigned int idx){
	return std::get<1>(next_[idx]);
}


/** Class Graph
 *
 */
template<typename N, typename E>
Graph<N,E>::Graph()
{}


template<typename N, typename E>
Graph<N,E>::Graph(const Graph<N,E> &g){
	arr_.clear();
	for(unsigned int i = 0; i<g.arr_.size(); ++i){
		auto ptr = std::make_shared<Node<N,E>>(g.arr_[i]->getData());
		arr_.push_back(ptr);
		for(unsigned int j=0;j<g.arr_[i]->getNumEdge();++j){
			ptr->addEdge(g.arr_[i]->getWeight(j), std::make_shared<Node<N,E>>(g.arr_[i]->getDst(j)->getData()));
		}
	}
}


template<typename N, typename E>
Graph<N,E>::Graph(Graph<N,E> &&g)
	:arr_(std::move(g.arr_))
{};


template<typename N, typename E>
Graph<N,E>& Graph<N,E>::operator=(const Graph<N,E> &g){
	if (this != &g){
		arr_.clear();
		for(unsigned int i = 0; i<g.arr_.size(); ++i){
			auto ptr = std::make_shared<Node<N,E>>(g.arr_[i]->getData());
			arr_.push_back(ptr);
			for(unsigned int j=0;j<g.arr_[i]->getNumEdge();++j){
				ptr->addEdge(g.arr_[i]->getWeight(j), std::make_shared<Node<N,E>>(g.arr_[i]->getDst(j)->getData()));
			}
		}
	}
	return *this;
}



template<typename N, typename E>
Graph<N,E>& Graph<N,E>::operator=(Graph<N,E> &&g){
	if(this != &g){
		arr_.clear();
		for(unsigned int i=0;i<g.arr_.size();++i)
			arr_.push_back(g.arr_[i]);
		g.arr_.clear();
	}
	return *this;
}

		


template<typename N, typename E>
bool Graph<N,E>::addNode(const N& val)
{
	std::shared_ptr<Node<N,E>> n (new Node<N,E>);
	n->setData(val);
	if(isNode(val))
		return false;
	arr_.push_back(n);
	
	return true;
}


template<typename N, typename E>
bool Graph<N,E>::addEdge(const N &src, const N &dst, const E &w){
	std::shared_ptr<Node<N,E>> s (new Node<N,E>);
	std::shared_ptr<Node<N,E>> d (new Node<N,E>);

	if(!isNode(src)||!isNode(dst))
	       throw std::runtime_error("Error: One or two nodes not exist.");
		
	s = findNode(src);
	d = findNode(dst);

	return s->addEdge(w,d);
}


template<typename N, typename E>
bool Graph<N,E>::replace(const N& oldData, const N& newData){
	std::shared_ptr<Node<N,E>> n (new Node<N,E>);
	if(!isNode(oldData))
		throw std::runtime_error("Error: No node with oldData exist.");

	if(isNode(newData))
		return false;

	n = findNode(oldData);
	n->setData(newData);

	return true;
}


template<typename N, typename E>
void Graph<N,E>::mergeReplace(const N& oldData, const N& newData){
	if(!isNode(oldData)||!isNode(newData))
		throw std::runtime_error("Error: One or two nodes with specified data do not exist.");
	std::shared_ptr<Node<N,E>> old_node (new Node<N,E>);
	old_node = findNode(oldData);

	std::shared_ptr<Node<N,E>> new_node (new Node<N,E>);
	new_node = findNode(newData);

	for(unsigned int i=0; i!=old_node->getNumEdge();++i)
		new_node->addEdge(old_node->getWeight(i), old_node->getDst(i));
	for(unsigned int i=0;i!=arr_.size();++i)
		for(unsigned int j=0;j!= arr_[i]->getNumEdge();++j)
			if(arr_[i]->getDst(j)==old_node){
				E weight = arr_[i]->getWeight(j);
				if(arr_[i]->deleteEdge(weight, old_node)) j--;
				arr_[i]->addEdge(weight, new_node);
			}
	
			
	deleteNode(oldData);
}


template<typename N, typename E>
void Graph<N,E>::deleteNode(const N& val) noexcept{
	if(!isNode(val))
		return;
	std::shared_ptr<Node<N,E>> del_node (new Node<N,E>);
	del_node = findNode(val);

	for(unsigned int i=0;i!=arr_.size();++i)
		for(unsigned int j=0;j< arr_[i]->getNumEdge();++j)
			if(arr_[i]->getDst(j)==del_node){
				E weight = arr_[i]->getWeight(j);
				if(arr_[i]->deleteEdge(weight, del_node)) j--;
			}


	for(unsigned int i = 0; i<arr_.size(); ++i)
		if(arr_[i]->getData() == val)
			arr_.erase(arr_.begin()+i);

}


template<typename N, typename E>
void Graph<N,E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept {
	if(!isNode(src))
		return;
	std::shared_ptr<Node<N,E>> s (new Node<N,E>);
	std::shared_ptr<Node<N,E>> d (new Node<N,E>);

	s = findNode(src);
	d = findNode(dst);

	s->deleteEdge(w,d);					
}


template<typename N, typename E>
void Graph<N,E>::clear() noexcept{
	arr_.clear();
}


template<typename N, typename E>
bool Graph<N,E>::isNode(const N &val) const{
	for(unsigned int i = 0; i<arr_.size(); ++i){
		if(arr_[i]->getData() == val)
			return true;
	}
	return false;	
}



template<typename N, typename E>
bool Graph<N,E>::isConnected(const N& val, const N& dst) const{
	if(!isNode(val)||!isNode(dst))
		throw std::runtime_error("Error: One or two nodes with specified data do not exist.");
	
	std::shared_ptr<Node<N,E>> s (new Node<N,E>);
	std::shared_ptr<Node<N,E>> d (new Node<N,E>);
	s = findNode(val);
	d = findNode(dst);

	for(unsigned int i=0;i!=s->getNumEdge(); ++i)
		if(s->getDst(i) == d)
			return true;
	return false;
}

		
template<typename N, typename E>
std::shared_ptr<Node<N,E>> Graph<N,E>::findNode(const N &src) const{
	for(unsigned int i = 0; i<arr_.size(); ++i){
		if(arr_[i]->getData() == src)
			return arr_[i];
	}
	return NULL;
}

template <typename A, typename B>
void zip(
    const std::vector<A> &a, 
    const std::vector<B> &b, 
    std::vector<std::pair<A,B>> &zipped)
{
    for(size_t i=0; i<a.size(); ++i)
    {
        zipped.push_back(std::make_pair(a[i], b[i]));
    }
}


template <typename A, typename B>
void unzip(
    const std::vector<std::pair<A, B>> &zipped, 
    std::vector<A> &a, 
    std::vector<B> &b)
{
    for(size_t i=0; i<a.size(); i++)
    {
        a[i] = zipped[i].first;
        b[i] = zipped[i].second;
    }
}

	
template<typename N, typename E>
void Graph<N,E>::printNodes() const {
	std::vector<int> out_degree;
	std::vector<N> data_val;
	for(unsigned int i = 0;i<arr_.size();++i){
		out_degree.push_back(arr_[i]->getNumEdge());
		data_val.push_back(arr_[i]->getData());
	}
	std::vector<std::pair<N, int>> zipped;
	zip(data_val, out_degree, zipped);

	std::sort(std::begin(zipped), std::end(zipped), 
        [&](const auto& a, const auto& b)
        {
            return a.first < b.first;
        });

	std::stable_sort(std::begin(zipped), std::end(zipped), 
        [&](const auto& a, const auto& b)
        {
            return a.second < b.second;
        });

	for(unsigned int i = 0;i<arr_.size();++i){
		std::cout << zipped[i].first<<std::endl;
	}
}


template<typename N, typename E>
void Graph<N,E>::printEdges(const N& val) const{
	if(!isNode(val))
		throw std::runtime_error("Error: Node with specified data does not exist.");

	std::shared_ptr<Node<N,E>> n (new Node<N,E>);
	n = findNode(val);

	std::cout << "Edge attached to Node " << val <<std::endl;
	if(n->getNumEdge()==0)
		std::cout << "(null)" <<std::endl;
	else{
		std::vector<N> dst_data;
		std::vector<E> edge_weight;
		for(unsigned int i = 0;i<n->getNumEdge();++i){
			dst_data.push_back(n->getDst(i)->getData());
			edge_weight.push_back(n->getWeight(i));
		}
		std::vector<std::pair<N, E>> zipped;
		zip(dst_data, edge_weight, zipped);

		std::sort(std::begin(zipped), std::end(zipped), 
		[&](const auto& a, const auto& b)
		{
			return a.first < b.first;
        	});

		std::stable_sort(std::begin(zipped), std::end(zipped), 
		[&](const auto& a, const auto& b)
		{
			return a.second < b.second;
		});


		for(unsigned int i = 0;i<n->getNumEdge();++i)
			std::cout << zipped[i].first << " " << zipped[i].second <<std::endl;
	}

}



template<typename N, typename E>		
void Graph<N,E>::printGraph() const{
	std::cout <<"size: " << arr_.size() << std::endl;
	for(unsigned int i = 0;i<arr_.size();++i){
		std::cout << "Adjacency list of vertex " << arr_[i]->getData()<<std::endl;
		for(unsigned int j=0;j<arr_[i]->getNumEdge();++j)
			std::cout << arr_[i]->getDst(j)->getData() << " -> ";
		std::cout <<std::endl;
		for(unsigned int j=0;j<arr_[i]->getNumEdge();++j)
			std::cout << arr_[i]->getWeight(j) << " -> ";
		std::cout <<std::endl;
	}
}


template<typename N, typename E>	
void Graph<N,E>::begin() const{
	iterator_ = arr_.cbegin();
}


template<typename N, typename E>
bool Graph<N,E>::end() const{
	return iterator_ == arr_.cend();
}

template<typename N, typename E>
void Graph<N,E>::next() const{
	++iterator_;
}


template<typename N, typename E>
const N& Graph<N,E>::value() const{
	return (*iterator_)->getData();
}

